'''Лабораторная работа №5
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного вычисления данной функции рекурсивно и итерационно. 
Определить границы применимости рекурсивного и итерационного подхода. Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по лабораторной работе.
Вариант:
10.	F(n<2) = 5; F(n) = (-1)n*( (n-1)! - F(n-5))'''


import math
import time
import matplotlib.pyplot as plt
from functools import lru_cache

# Кэширование факториалов для ускорения работы
factorials = {}

def precompute_factorials(up_to):
    global factorials
    factorials = {0: 1}
    for i in range(1, up_to + 1):
        factorials[i] = factorials[i - 1] * i

def itfact(x):
    return factorials.get(x, math.factorial(x))

@lru_cache(maxsize=None)
def rec_f(x):
    if x < 2:
        return 5
    else:
        return ((-1) ** x) * (itfact(x - 1) - rec_f(x - 5))

def it_f(x):
    if x < 2:
        return 5
    f = [5] * (x + 1)
    for i in range(2, x + 1):
        f[i] = ((-1) ** i) * (itfact(i - 1) - f[i - 5])
    return f[x]

def main():
    n = -1
    while n < 2:
        try:
            n = int(input("Введите натуральное число больше 1: "))
        except ValueError:
            print("Некорректный ввод, попробуйте снова.")

    # Предвычисляем факториалы до n
    precompute_factorials(n)

    graf = list(range(1, n + 1))
    timer = []
    timer_rec = []

    for i in graf:
        start = time.time()
        result = it_f(i)
        end = time.time()
        timer.append(end - start)

        start_rec = time.time()
        res = rec_f(i)
        end_rec = time.time()
        timer_rec.append(end_rec - start_rec)

        print(i,
              " | Результат рекурсии ->", res,
              " | результат итерации ->", result,
              " | время рекурсии ->", end_rec - start_rec,
              " | время итерации ->", end - start)

    plt.figure(figsize=(10, 5))
    plt.plot(graf, timer, label='Итерационное вычисление')
    plt.plot(graf, timer_rec, label='Рекурсивное вычисление')
    plt.xlabel('Значение n')
    plt.ylabel('Время выполнения (с)')
    plt.title('Сравнение времени выполнения рекурсивного и итерационного вычисления')
    plt.legend(loc='upper left')
    plt.show()

if __name__ == "__main__":
    main()
